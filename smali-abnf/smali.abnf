#####################
# Smali ABNF grammar
# Author: Dmitry Vorobiev
# Naming conventions:
# dirXXX - smali directives .XXX
# classXXX - class entity (field, method etc)
# methodXXX - method entitiy (directive lines)
# codeXXX - piece of code
# cmdXXX - smali command with parameters and optional comment
#####################

#####BASIC RULES#####
HTAB = %x09;
CR = %x0d;
LF = %x0a;
SP = %x20;
CRLF = [CR] LF;
QUOT = %x22;
HASH = %x23;
COMMA = %x2c;
DOT = %x2e;
COLON = %x3a;
SEMICOLON = %x3b;
EQ = %x3d;
UNDERSCORE = %x5f;
ALPHA = %x41-5a / %x61-7a;
DIGIT = %x30-39;
HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F" ;
VCHAR = %x21-7e;

#####COMMON RULES#####
padding = 1*(SP / HTAB);
optPadding = 0*1(padding);
listSeparator = *padding COMMA *padding;
escSymbol = ALPHA / DIGIT / SP / %x21 / %x5c %x22 / %x23-2f / %x3a-40 / %x5b / %x5c %x5c / %x5d-60 / %x7b-7e / %x5c %x72 / %x5c %x6e / %x5c %x74;
qualifier = (ALPHA / UNDERSCORE) *(ALPHA / DIGIT / UNDERSCORE);
className = %x4c qualifier *(%x2f qualifier) ["$" qualifier] SEMICOLON;
commentSequence = %x23 *(padding / VCHAR);
comment = optPadding commentSequence CRLF;
emptyLine = optPadding CRLF;
skipLine = comment / emptyLine;
fileName = QUOT *(ALPHA / DIGIT) DOT *(ALPHA / DIGIT) QUOT;
accessMode = "public" / "private" / "protected" / "static" / "final" / "abstract";
type = "V" / "Z" / "B" / "S" / "C" / "I" / "J" / "F" / "D" / className / "[" type;
boolValue = "true" / "false";
intDecValue = [%x2d] 1*DIGIT;
intHexValue = [%x2d] %x30 %x78 1*HEXDIG;
intValue = intHexValue / intDecValue;
strValue = QUOT *escSymbol QUOT;
value = boolValue / intValue / strValue;
codeLabel = COLON qualifier;
codeRegisterP = "p" intDecValue;
codeRegisterP64 = "p" intDecValue;
codeRegisterV = "v" intDecValue;
codeRegisterV64 = "v" intDecValue;
codeRegisterVDst = "v" intDecValue;
codeRegisterV64Dst = "v" intDecValue;
codeRegister = codeRegisterP / codeRegisterV;
codeRegister64 = codeRegisterP64 / codeRegisterV64;
codeRegisterGroup = "{" optPadding (codeRegisterP / codeRegisterV) optPadding *(COMMA optPadding (codeRegisterP / codeRegisterV) optPadding) "}";

#####SMALI DIRECTIVE RULES#####
dirClass = ".class";
dirEnd = ".end";
dirEndMethod = dirEnd padding "method";
dirImplements = ".implements";
dirField = ".field";
dirLocal = ".local";
dirMethod = ".method";
dirRegisters = ".registers";
dirSuper = ".super";
dirSource = ".source";

#####SMALI GENERAL RULES#####
smali = classHeader *(classField / skipLine) *(classMethod / skipLine);
todoStubLine = *(VCHAR / padding);

#####SMALI HEADER RULES#####
classHeader = classClass classSuper [classSource] *classImplements;

#class directive statements
classClass = optPadding dirClass padding *(accessMode padding) optPadding className optPadding CRLF;
classSuper = optPadding dirSuper padding className optPadding CRLF;
classSource = optPadding dirSource padding fileName optPadding CRLF;
classImplements = optPadding dirImplements padding className optPadding CRLF;

#method directive statements
methodLocals = optPadding ".locals" padding intValue optPadding CRLF;
methodParam = optPadding ".parameter" [padding strValue] optPadding CRLF;
methodPrologue = optPadding ".prologue" optPadding CRLF;
methodLine = optPadding ".line" padding intValue optPadding CRLF;
methodRegisters = optPadding ".registers" padding intValue optPadding CRLF;
methodLocal = optPadding ".local" padding todoStubLine CRLF;


#####SMALI FIELD RULES#####
classField = optPadding dirField padding *(accessMode padding) qualifier COLON type optPadding [EQ optPadding value] optPadding CRLF;

#####SMALI METHOD RULES#####
classMethod = optPadding dirMethod padding *(accessMode padding) (classConstructorName / qualifier) optPadding classMethodProto optPadding CRLF methodBody optPadding dirEndMethod optPadding CRLF;
classConstructorName = "constructor" padding smaliConstructorName;
classMethodProto = %x28 *type %x29 type;
methodBody = [methodLocals] [methodRegisters] *(methodParam / skipLine) methodPrologue *(methodLine / methodLocal / cmdAny / label / skipLine);

label = optPadding codeLabel optPadding [commentSequence] CRLF;

smaliConstructorName = ("<init>" / "<clinit>");
smaliFieldRef = className "->" qualifier COLON type;
smaliMethodRef = className "->" (smaliConstructorName / qualifier) classMethodProto;

#####SMALI COMMANDS RULES#####
cmdAny =  cmdConst4;
cmdAny =/ cmdConstString;
cmdAny =/ cmdGoto;
cmdAny =/ cmdIfEq;
cmdAny =/ cmdIfEqz;
cmdAny =/ cmdIfNe;
cmdAny =/ cmdIfNez;
cmdAny =/ cmdIget;
cmdAny =/ cmdIgetObject;
cmdAny =/ cmdIgetWide;
cmdAny =/ cmdInvokeDirect;
cmdAny =/ cmdInvokeStatic;
cmdAny =/ cmdInvokeVirtual;
cmdAny =/ cmdIput;
cmdAny =/ cmdIputObject;
cmdAny =/ cmdIputWide;
cmdAny =/ cmdMove;
cmdAny =/ cmdMoveResultObject;
cmdAny =/ cmdNewInstance;
cmdAny =/ cmdNop;
cmdAny =/ cmdReturn;
cmdAny =/ cmdReturnObject;
cmdAny =/ cmdReturnVoid;
cmdAny =/ cmdReturnWide;
cmdAny =/ cmdSputObject;

cmdConst4           = optPadding "const/4" padding codeRegisterVDst optPadding COMMA optPadding intValue optPadding [commentSequence] CRLF;
cmdConstString      = optPadding "const-string" padding codeRegisterVDst optPadding COMMA optPadding strValue optPadding [commentSequence] CRLF;
cmdGoto             = optPadding "goto" padding codeLabel optPadding [commentSequence] CRLF;
cmdIfEq             = optPadding "if-eq" padding codeRegister optPadding COMMA optPadding codeRegister optPadding COMMA optPadding codeLabel optPadding [commentSequence] CRLF;
cmdIfEqz            = optPadding "if-eqz" padding codeRegister optPadding COMMA optPadding codeLabel optPadding [commentSequence] CRLF;
cmdIfNe             = optPadding "if-ne" padding codeRegister optPadding COMMA optPadding codeRegister optPadding COMMA optPadding codeLabel optPadding [commentSequence] CRLF;
cmdIfNez            = optPadding "if-nez" padding codeRegister optPadding COMMA optPadding codeLabel optPadding [commentSequence] CRLF;
cmdIget             = optPadding "iget" padding codeRegisterVDst optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdIgetObject       = optPadding "iget-object" padding codeRegisterVDst optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdIgetWide         = optPadding "iget-wide" padding codeRegisterV64Dst optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdInvokeDirect     = optPadding "invoke-direct" padding codeRegisterGroup optPadding COMMA optPadding smaliMethodRef optPadding [commentSequence] CRLF;
cmdInvokeStatic     = optPadding "invoke-static" padding codeRegisterGroup optPadding COMMA optPadding smaliMethodRef optPadding [commentSequence] CRLF;
cmdInvokeVirtual    = optPadding "invoke-virtual" padding codeRegisterGroup optPadding COMMA optPadding smaliMethodRef optPadding [commentSequence] CRLF;
cmdIput             = optPadding "iput" padding codeRegister optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdIputObject       = optPadding "iput-object" padding codeRegister optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdIputWide         = optPadding "iput-wide" padding codeRegister64 optPadding COMMA optPadding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
cmdMove             = optPadding "move" padding codeRegisterVDst optPadding COMMA optPadding codeRegister optPadding [commentSequence] CRLF;
cmdMoveResultObject = optPadding "move-result-object" padding codeRegisterVDst optPadding [commentSequence] CRLF;
cmdNewInstance      = optPadding "new-instance" padding codeRegisterVDst optPadding COMMA optPadding className optPadding [commentSequence] CRLF;
cmdNop              = optPadding "nop" optPadding [commentSequence] CRLF;
cmdReturn           = optPadding "return" padding codeRegisterV optPadding [commentSequence] CRLF;
cmdReturnObject     = optPadding "return-object" padding codeRegisterV optPadding [commentSequence] CRLF;
cmdReturnVoid       = optPadding "return-void" optPadding [commentSequence] CRLF;
cmdReturnWide       = optPadding "return-wide" padding codeRegister64 optPadding [commentSequence] CRLF;
cmdSputObject       = optPadding "sput-object" padding codeRegister optPadding COMMA optPadding smaliFieldRef optPadding [commentSequence] CRLF;
