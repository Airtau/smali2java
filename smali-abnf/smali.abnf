#####################
# Smali ABNF grammar
# Author: Dmitry Vorobiev
# Naming conventions:
# dirXXX - smali directives .XXX
# classXXX - class entity (field, method etc)
# methodXXX - method entitiy (directive lines)
# codeXXX - piece of code
# cmdXXX - smali command with parameters and optional comment
#####################

#####BASIC RULES#####
HTAB = %x09;
CR = %x0d;
LF = %x0a;
SP = %x20;
CRLF = [CR] LF;
QUOT = %x22;
HASH = %x23;
COMMA = %x2c;
DOT = %x2e;
COLON = %x3a;
SEMICOLON = %x3b;
EQ = %x3d;
UNDERSCORE = %x5f;
ALPHA = %x41-5a / %x61-7a;
DIGIT = %x30-39;
HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F" ;
VCHAR = %x21-7e;

#####COMMON RULES#####
fmtSeparator = SP / HTAB;
escSymbol = ALPHA / DIGIT / SP / %x21 / %x5c %x22 / %x23-2f / %x3a-40 / %x5b / %x5c %x5c / %x5d-60 / %x7b-7e / %x5c %x72 / %x5c %x6e / %x5c %x74;
qualifier = (ALPHA / UNDERSCORE) *(ALPHA / DIGIT / UNDERSCORE);
className = %x4c qualifier *(%x2f qualifier) ["$" qualifier] SEMICOLON;
commentSequence = %x23 *(fmtSeparator / VCHAR);
comment = *fmtSeparator commentSequence CRLF;
emptyLine = *fmtSeparator CRLF;
skipLine = comment / emptyLine;
fileName = QUOT *(ALPHA / DIGIT) DOT *(ALPHA / DIGIT) QUOT;
accessMode = "public" / "private" / "protected" / "static" / "final" / "abstract";
type = "V" / "Z" / "B" / "S" / "C" / "I" / "J" / "F" / "D" / className / "[" type;
boolValue = "true" / "false";
intDecValue = [%x2d] 1*DIGIT;
intHexValue = [%x2d] %x30 %x78 1*HEXDIG;
intValue = intHexValue / intDecValue;
strValue = QUOT *escSymbol QUOT;
value = boolValue / intValue / strValue;
codeLabel = COLON qualifier;
codeRegisterP = "p" intDecValue;
codeRegisterP64 = "p" intDecValue;
codeRegisterV = "v" intDecValue;
codeRegisterV64 = "v" intDecValue;
codeRegisterVDst = "v" intDecValue;
codeRegisterV64Dst = "v" intDecValue;
codeRegister = codeRegisterP / codeRegisterV;
codeRegister64 = codeRegisterP64 / codeRegisterV64;
codeRegisterGroup = "{" *fmtSeparator (codeRegisterP / codeRegisterV) *fmtSeparator *(COMMA *fmtSeparator (codeRegisterP / codeRegisterV) *fmtSeparator) "}";

#####SMALI DIRECTIVE RULES#####
dirClass = ".class";
dirEnd = ".end";
dirEndMethod = dirEnd *fmtSeparator "method";
dirImplements = ".implements";
dirField = ".field";
dirLocal = ".local";
dirMethod = ".method";
dirRegisters = ".registers";
dirSuper = ".super";
dirSource = ".source";

#####SMALI GENERAL RULES#####
smali = classHeader *(classField / skipLine) *(classMethod / skipLine);
todoStubLine = *(VCHAR / fmtSeparator);

#####SMALI HEADER RULES#####
classHeader = classClass classSuper [classSource] *classImplements;

#class directive statements
classClass = *fmtSeparator dirClass *fmtSeparator *(accessMode *fmtSeparator) *fmtSeparator className *fmtSeparator CRLF;
classSuper = *fmtSeparator dirSuper *fmtSeparator className *fmtSeparator CRLF;
classSource = *fmtSeparator dirSource *fmtSeparator fileName *fmtSeparator CRLF;
classImplements = *fmtSeparator dirImplements *fmtSeparator className *fmtSeparator CRLF;

#method directive statements
methodLocals = *fmtSeparator ".locals" 1*fmtSeparator intValue *fmtSeparator CRLF;
methodParam = *fmtSeparator ".parameter" [1*fmtSeparator strValue *fmtSeparator] *fmtSeparator CRLF;
methodPrologue = *fmtSeparator ".prologue" *fmtSeparator CRLF;
methodLine = *fmtSeparator ".line" 1*fmtSeparator intValue *fmtSeparator CRLF;
methodRegisters = *fmtSeparator ".registers" 1*fmtSeparator intValue *fmtSeparator CRLF;
methodLocal = *fmtSeparator ".local" 1*fmtSeparator todoStubLine CRLF;


#####SMALI FIELD RULES#####
classField = *fmtSeparator dirField 1*fmtSeparator *(accessMode 1*fmtSeparator) qualifier COLON type *fmtSeparator [EQ *fmtSeparator value] *fmtSeparator CRLF;

#####SMALI METHOD RULES#####
classMethod = *(fmtSeparator) dirMethod *(fmtSeparator) *(accessMode 1*fmtSeparator) (classConstructorName / qualifier) *(fmtSeparator) classMethodProto *(fmtSeparator) CRLF methodBody *(fmtSeparator) dirEndMethod *(fmtSeparator) CRLF;
classConstructorName = "constructor" *(fmtSeparator) smaliConstructorName;
classMethodProto = %x28 *type %x29 type;
methodBody = [methodLocals] [methodRegisters] *(methodParam / skipLine) methodPrologue *(methodLine / methodLocal / cmdAny / label / skipLine);

label = *fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;

smaliConstructorName = ("<init>" / "<clinit>");
smaliFieldRef = className "->" qualifier COLON type;
smaliMethodRef = className "->" (smaliConstructorName / qualifier) classMethodProto;

#####SMALI COMMANDS RULES#####
cmdAny =  cmdConst4;
cmdAny =/ cmdConstString;
cmdAny =/ cmdGoto;
cmdAny =/ cmdIfEq;
cmdAny =/ cmdIfEqz;
cmdAny =/ cmdIfNe;
cmdAny =/ cmdIfNez;
cmdAny =/ cmdIget;
cmdAny =/ cmdIgetObject;
cmdAny =/ cmdIgetWide;
cmdAny =/ cmdInvokeDirect;
cmdAny =/ cmdInvokeStatic;
cmdAny =/ cmdInvokeVirtual;
cmdAny =/ cmdIput;
cmdAny =/ cmdIputObject;
cmdAny =/ cmdIputWide;
cmdAny =/ cmdMove;
cmdAny =/ cmdMoveResultObject;
cmdAny =/ cmdNewInstance;
cmdAny =/ cmdNop;
cmdAny =/ cmdReturn;
cmdAny =/ cmdReturnObject;
cmdAny =/ cmdReturnVoid;
cmdAny =/ cmdReturnWide;
cmdAny =/ cmdSputObject;

cmdConst4           = *fmtSeparator "const/4" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator intValue *fmtSeparator [commentSequence] CRLF;
cmdConstString      = *fmtSeparator "const-string" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator strValue *fmtSeparator [commentSequence] CRLF;
cmdGoto             = *fmtSeparator "goto" 1*fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;
cmdIfEq             = *fmtSeparator "if-eq" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;
cmdIfEqz            = *fmtSeparator "if-eqz" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;
cmdIfNe             = *fmtSeparator "if-ne" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;
cmdIfNez            = *fmtSeparator "if-nez" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeLabel *fmtSeparator [commentSequence] CRLF;
cmdIget             = *fmtSeparator "iget" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdIgetObject       = *fmtSeparator "iget-object" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdIgetWide         = *fmtSeparator "iget-wide" 1*fmtSeparator codeRegisterV64Dst *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdInvokeDirect     = *fmtSeparator "invoke-direct" 1*fmtSeparator codeRegisterGroup *fmtSeparator COMMA *fmtSeparator smaliMethodRef *fmtSeparator [commentSequence] CRLF;
cmdInvokeStatic     = *fmtSeparator "invoke-static" 1*fmtSeparator codeRegisterGroup *fmtSeparator COMMA *fmtSeparator smaliMethodRef *fmtSeparator [commentSequence] CRLF;
cmdInvokeVirtual    = *fmtSeparator "invoke-virtual" 1*fmtSeparator codeRegisterGroup *fmtSeparator COMMA *fmtSeparator smaliMethodRef *fmtSeparator [commentSequence] CRLF;
cmdIput             = *fmtSeparator "iput" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdIputObject       = *fmtSeparator "iput-object" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdIputWide         = *fmtSeparator "iput-wide" 1*fmtSeparator codeRegister64 *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
cmdMove             = *fmtSeparator "move" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator codeRegister *fmtSeparator [commentSequence] CRLF;
cmdMoveResultObject = *fmtSeparator "move-result-object" 1*fmtSeparator codeRegisterVDst *fmtSeparator [commentSequence] CRLF;
cmdNewInstance      = *fmtSeparator "new-instance" 1*fmtSeparator codeRegisterVDst *fmtSeparator COMMA *fmtSeparator className *fmtSeparator [commentSequence] CRLF;
cmdNop              = *fmtSeparator "nop" *fmtSeparator [commentSequence] CRLF;
cmdReturn           = *fmtSeparator "return" 1*fmtSeparator codeRegisterV *fmtSeparator [commentSequence] CRLF;
cmdReturnObject     = *fmtSeparator "return-object" 1*fmtSeparator codeRegisterV *fmtSeparator [commentSequence] CRLF;
cmdReturnVoid       = *fmtSeparator "return-void" *fmtSeparator [commentSequence] CRLF;
cmdReturnWide       = *fmtSeparator "return-wide" 1*fmtSeparator codeRegister64 *fmtSeparator [commentSequence] CRLF;
cmdSputObject       = *fmtSeparator "sput-object" 1*fmtSeparator codeRegister *fmtSeparator COMMA *fmtSeparator smaliFieldRef *fmtSeparator [commentSequence] CRLF;
